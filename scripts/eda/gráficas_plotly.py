# -*- coding: utf-8 -*-
"""Gráficas Plotly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hP4Qn_UMnrn8W3loHO5dGKiAlcCqctw8
"""

!pip install -U plotly
!pip install -U kaleido # Necesitamos esta librería para exportar las visualizaciones como imágenes estáticas

!pip install seaborn --upgrade
!pip install -U geopandas 
!pip install gdown

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import plotly
import plotly.graph_objs as go 
import plotly.express as px
import requests
import json


from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import contingency_matrix

from scipy import stats
import scipy
import statsmodels.api as sm
import matplotlib as mpl  # Matplotlib se verá en los recursos de la Unidad 4.
import matplotlib.pyplot as plt
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'
mpl.rcParams['figure.dpi'] = 105
mpl.rcParams['figure.figsize'] = (9, 7)

!pip install gdown
!pip install -U rtree mapclassify fiona pyproj
!sudo apt install libspatialindex-dev

secop_i = pd.read_csv('preprocesado.csv', sep='|')

#=======
# Limpieza básica
#=======
#Limpieza de duplicados
secop_i.drop_duplicates(inplace=True)
#Filtro por contratos nulos
secop_i = secop_i[secop_i["cuantia_contrato"] > 0]
secop_i = secop_i[secop_i["valor_total_de_adiciones"] < 12090487690]
#Filtro valores incoherentes
secop_i = secop_i[secop_i["cuantia_contrato"] + secop_i["valor_total_de_adiciones"] == secop_i["valor_contrato_con_adiciones"]]

secop_i.info()

secop_i['Tipo_persona']= np.where((secop_i['tipo_identifi_del_contratista'] =='Carné Diplomático'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Cédula de Ciudadanía'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Cédula de Extranjería'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Nit de Persona Natural'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Número de Fideicomiso'),'Persona natural', np.where((secop_i['tipo_identifi_del_contratista'] =='Nuip'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Pasaporte'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Tarjeta de Identidad'),'Persona natural',np.where((secop_i['tipo_identifi_del_contratista'] =='Nit de Extranjería'),'Persona jurídica',np.where((secop_i['tipo_identifi_del_contratista'] =='Nit de Persona Jurídica'),'Persona jurídica',np.where((secop_i['tipo_identifi_del_contratista'] =='Sociedades Extranjeras'),'Persona jurídica', 'No definido')))))))))))

secop = secop_i[secop_i["valor_total_de_adiciones"] > 1000000]

pd.options.plotting.backend = "plotly"

Sobrecostos = px.pie(secop, # DataFrame. Dataset de propinas "tips".
       names = 'sobrecosto',    # Categorías usadas para distinguir cada sección. (Día de la semana)
       values = 'valor_total_de_adiciones',   # Valores representados por cada sección a partir del tamaño del ángulo. (Total de propinas)
       hole = 0.3        # Proporción del agujero del centro.
       )
Sobrecostos

plotly.offline.plot(Sobrecostos, filename='Sobrecostos.html')

Objeto = secop[['valor_total_de_adiciones', 'objeto_a_contratar']].plot(kind='box', color='objeto_a_contratar')
Objeto

plotly.offline.plot(Objeto, filename='Objeto a contratar.html')

Tipo_persona = secop[['valor_total_de_adiciones', 'Tipo_persona']].plot(kind='box', color='Tipo_persona')
Tipo_persona

plotly.offline.plot(Tipo_persona, filename='Tipo_persona.html')

Departamento = secop[['valor_total_de_adiciones', 'departamento_entidad']].plot(kind='box', color='departamento_entidad')
Departamento

plotly.offline.plot(Departamento, filename='Depto.html')